
#!/usr/bin/env bash

######################################################################
#
##
#
#
######################################################################

source="$(dirname $(readlink -f $0))"
media_file=$source/media.js

echo $source

interface_folder=interface
lang_code=ru
number_folder=numbers
consonant_folder=consonants
audio_folder=audio
image_folder=images
ignore="delete_me*"

directory=$lang_code/$number_folder
root_folder=media

######################################################################

checkIfUninhabited () {
  local _dir=$1
  local _temp="$(find $_dir -type f ! -regex '.*\(name.txt\|delete_me.*\)')"

  if [ -z "$_temp" ]
  then
   return 1
  fi
}

getFilesArray() {
  local _output=$1
  local _parent=$2
  local _type_regex=$3
  local _array=()
  local _temp=""

  for _file in $_parent*/
  do
    _temp=$(basename "$_file")

    if [  ]; then
      _array+=($_temp)
    fi
  done

  eval $_output="${_array[@]}"
}

createJSArray () {
  local _output=$1
  local _input=("${@:2}")

  local output=$(IFS=/ eval 'echo "${_input[*]}"')
  output="$(echo $output | sed -e 's_/_\", \"_g')"

  if [ -z "$output" ]; then
    output="[]"
  else
    output='[ "'$output'" ]'
  fi

  eval $_output="'$output'"
}

indexOf () {
  # Returns 1 for first element, 0 for not found
  local match="$1"
  local end=$#
  local ii=1

  shift

  for (( ; ii < end; ii++ ))
  do
    [[ "${!ii}" == "$match" ]] && return $ii
  done

  return 0
}

add_audio_array() {
  local _dir=$1audio
  local _regex=".*\.ogg\$|.*\.mp3\$"
  local _sh_array=($_dir/*)
  local ii=${#_sh_array[@]}
  local _delete_me=delete_me

  local _name
  local _check

  for (( ; ii-- ; ))
  do
    _name=${_sh_array[$ii]}

    if [[ "$_name" =~ ^.*(\.ogg|.mp3)$ ]]; then
      # This is an audio file
      _name=$(basename "$_name" .ogg)
      _name=$(basename "$_name" .mp3)

      if [ "${_name,,}" == "$_delete_me" ]; then
        # Ignore delete_me files
        unset _sh_array[$ii]

      else
        indexOf "$_name" "${_sh_array[@]}" # return 1 for first element
        if [ $? != 0 ]; then
          # unset leaves empty elements...
          unset _sh_array[$ii]
        else
          _sh_array[$ii]=$_name
        fi
      fi

    else
      echo "AUDIO: Ignoring $_name"
      unset _sh_array[$ii]
    fi
  done

  for _file in "${_sh_array[@]}"
  do
    if [ ! -f "$_dir/$_file.ogg" ]; then
      echo "AUDIO: Missing  $_file.ogg in $_dir"
    elif [ ! -f "$_dir/$_file.mp3" ]; then
      echo "AUDIO: Missing  $_file.mp3 in $_dir"
    fi
  done 

  # ... and this operation removes empty elements
  _sh_array=( "${_sh_array[@]}" )
  createJSArray _js_array "${_sh_array[@]}"

  echo "      , audio: $_js_array" >> $media_file
}


addWords() {
  local _dir=$1
  echo "addWords      $_dir"
}
    
#     getDirectoriesArray words_array "$dir/words/"
#     

#     cat << EOF >> $media_file
#         path: "$root_folder/$directory/$dir"
#       , name: "$name"
#       , words: $words_array
# EOF
######################################################################

cat << EOF > $media_file
;(function (monika){

  if (!monika) {
    monika = window.monika = {}
  }

  monika.media = ({
    errorSound: "media/interface/error/not" // ogg, mp3

  , consonants: {
      0: "н"
    , 1: "р"
    , 2: "дт"
    , 3: "кгх"
    , 4: "чж"
    , 5: "пб"
    , 6: "шщл"
    , 7: "сз"
    , 8: "вф"
    , 9: "м"
    }

  , numbers: {
EOF


cd $directory

index=0
for dir in */
do
  checkIfUninhabited $source/$directory/$dir

  if [ $? = 0 ]
  then

    if [ $index == 0 ]
    then
      echo -n "      $dir" | sed 's/.$//' >> $media_file
      index=1
    else
      echo -n "    , $dir" | sed 's/.$//' >> $media_file
    fi

    echo ": {" >> $media_file

    name=$(<$source/$directory/$dir/name.txt)
    cat << EOF >> $media_file
        path: "$root_folder/$directory/$dir"
      , name: "$name"
EOF

    add_audio_array $source/$directory/$dir
    addWords $source/$directory/$dir

    echo "      }" >> $media_file
  fi
done

  #    path:   <path to media folder>
  #  , name:  "ноль"
  # // , audio:  [<name of recording of number>, ...]
  # // , word:  "иней"
  # // , words: { 
  # //     "иней": {
  # //       images: [<path to image>, ..., <default>, ...]
  # //     , audio: [<path to audio>, ..., <default>, ...]
  # //     }
  # //   }
  # // }

cat << EOF >> $media_file
    }

  , initialize: function initialize() {
      if (monika.manager) {
        console.log("Initializing monika.media")
        monika.manager.loadMedia(this)
      }

      return this
    }
      
  }).initialize()

})(window.monika)
EOF